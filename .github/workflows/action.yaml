name: Deploy my Lambda Function

on:
  push:
    branches:
      - main

env:
  BUCKET_NAME: my-bucket-afsdafadsfadsfweqr
  ZIP_FILE_NAME: ${{ github.sha}}.zip

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Set up python
        uses: actions/setup-python@v2
        with:
          python-version: 3.13
      - name: Install linting libraries
        run: |
          cd function
          pip install flake8
      - name: Lint with flake8
        run: |
            flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
            flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics


  build:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Set up python
        uses: actions/setup-python@v2
        with:
          python-version: 3.13
      - name: Install libraries
        run: |
          cd function
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt -t .; fi
      - name: Create zip bundle
        run : |
          cd function
          zip -r ../$ZIP_FILE_NAME .
      - name: Archieve artifact 
        uses: actions/upload-artifact@v4
        with:
          name: zipped-bundle
          path: ${{ env.ZIP_FILE_NAME }}
  publish:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: create release
        id: create-release
        uses: actions/create-release@v1
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
            tag_name: ${{ github.run_number}}
            release_name: Release from ${{ github.run_number }}
            body: New release for ${{ github.sha }}. Release notes on the documentation site
            draft: false
            prerelease: false
      - name: download artifact
        uses: actions/download-artifact@v4
        with: 
          name: zipped-bundle
      - name: upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url}}
          asset_path: ./${{ env.ZIP_FILE_NAME }}
          asset_name: source_code_With_libraries.zip
          asset_content_type: application/zip

  upload:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: zipped-bundle
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Upload to S3
        run: aws s3 cp $ZIP_FILE_NAME s3://$BUCKET_NAME/$ZIP_FILE_NAME

  test:
    runs-on: ubuntu-latest
    needs: upload
    strategy:
      matrix:
        input: ["Hello", "Hi"]
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Create test function
        run: |
          aws lambda create-function --function-name test-function-${{ matrix.input }} \
          --code S3Bucket=$BUCKET_NAME,S3Key=$ZIP_FILE_NAME \
          --handler lambda_function.lambda_handler --runtime python3.13 \
          --role arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/my-lambda-role
      - name: Invoke test function
        run: |
          aws lambda invoke --function-name test-function-${{ matrix.input }} \
          --payload $(echo "{\"input\": \"${{ matrix.input }}\"}" | base64) \
          --output json out
          if grep -q "Error" out; then
            exit1
          fi
      - name: Wait 10 seconds
        run: sleep 10
      - name: Destroy test function
        if: ${{ always() }}
        run: aws lambda delete-function --function-name test-function-${{ matrix.input }}

  deploy:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Update function code
        run: |
          aws lambda update-function-code \
            --function-name my-function \
            --s3-bucket $BUCKET_NAME \
            --s3-key $ZIP_FILE_NAME \
            --publish